version: '3'

tasks:
  # Build the main go project file
  u-bmc-build:
    cmds:
      - echo "Building u-bmc executable..."
      - go build -o build/u-bmc
      - echo "Done!"
    sources:
      - u-bmc.go
      - go.mod
    generates:
      - build/u-bmc

  # Build the signer and let it generate a key pair
  signer:
    dir: build/boot
    cmds:
      - echo "Building signer and generating key pair..."
      - cd ../../boot/signer && go build -o ../../build/boot/
      - mkdir -p keys/
      - ./signer -gen
      - echo "Done!"
    sources:
      - ../../boot/signer/*.go
    generates:
      - signer
      - keys/u-bmc.key
      - keys/u-bmc.pub

  # Build the LinuxBoot bootloader
  #TODO(MDr164) If size is critically important we could add upx here
  loader:
    dir: build/boot
    cmds:
      - echo "Building LinuxBoot loader..."
      - cd ../../boot/loader && GOARM={{.__GOARM}} GOARCH={{.__ARCH}} go build -ldflags="-s -w" -o ../../build/boot/
      - echo "Done!"
    sources:
      - ../../boot/loader/*.go
    generates:
      - loader

  # Build the initramfs packer
  cpio:
    dir: build/boot
    cmds:
      - echo "Building initramfs packer..."
      - cd ../../boot/cpio && go build -o ../../build/boot/
      - echo "Done!"
    sources:
      - ../../boot/cpio/*.go
    generates:
      - cpio

  # Build the ASPEED boot firmware
  aspeed-boot-bin:
    dir: build/boot
    cmds:
      - echo "Building ASPEED boot firmware for {{.__SOC}}"
      - |
        {{.__TOOLCHAIN}}gcc -c -o data.o ../../soc/{{.__SOC}}/data.S
      - |
        {{.__TOOLCHAIN}}gcc \
        -Wl,--build-id=none \
        -Wl,-T ../../soc/{{.__SOC}}/boot.ld \
        -Wl,--no-dynamic-linker \
        -nostdlib \
        ../../soc/{{.__SOC}}/start.S \
        ../../soc/{{.__SOC}}/platform_g$(echo $__SOC | cut -c 5).S \
        ../../soc/{{.__SOC}}/main.S \
        data.o \
        boot-config.auto.h \
        ../../platform/{{.__TARGET}}/boot/config.h \
        -I ../../platform/{{.__TARGET}}/boot/ \
        -I ../../boot
      - |
        {{.__TOOLCHAIN}}objcopy --only-section=.text -O binary boot.elf boot.bin
      - echo "Done!"
    sources:
      - ../../soc/ast2400/*
      - ../../soc/ast2500/*
    generates:
      - data.o
      - boot.elf
      - boot.bin
