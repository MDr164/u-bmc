// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ManagementServiceClient is the client API for ManagementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagementServiceClient interface {
	PressButton(ctx context.Context, in *ButtonPressRequest, opts ...grpc.CallOption) (*ButtonPressResponse, error)
	GetFans(ctx context.Context, in *GetFansRequest, opts ...grpc.CallOption) (*GetFansResponse, error)
	StreamConsole(ctx context.Context, opts ...grpc.CallOption) (ManagementService_StreamConsoleClient, error)
	GetVersion(ctx context.Context, in *GetVersionRequest, opts ...grpc.CallOption) (*GetVersionResponse, error)
}

type managementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewManagementServiceClient(cc grpc.ClientConnInterface) ManagementServiceClient {
	return &managementServiceClient{cc}
}

func (c *managementServiceClient) PressButton(ctx context.Context, in *ButtonPressRequest, opts ...grpc.CallOption) (*ButtonPressResponse, error) {
	out := new(ButtonPressResponse)
	err := c.cc.Invoke(ctx, "/proto.ManagementService/PressButton", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetFans(ctx context.Context, in *GetFansRequest, opts ...grpc.CallOption) (*GetFansResponse, error) {
	out := new(GetFansResponse)
	err := c.cc.Invoke(ctx, "/proto.ManagementService/GetFans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) StreamConsole(ctx context.Context, opts ...grpc.CallOption) (ManagementService_StreamConsoleClient, error) {
	stream, err := c.cc.NewStream(ctx, &ManagementService_ServiceDesc.Streams[0], "/proto.ManagementService/StreamConsole", opts...)
	if err != nil {
		return nil, err
	}
	x := &managementServiceStreamConsoleClient{stream}
	return x, nil
}

type ManagementService_StreamConsoleClient interface {
	Send(*ConsoleData) error
	Recv() (*ConsoleData, error)
	grpc.ClientStream
}

type managementServiceStreamConsoleClient struct {
	grpc.ClientStream
}

func (x *managementServiceStreamConsoleClient) Send(m *ConsoleData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *managementServiceStreamConsoleClient) Recv() (*ConsoleData, error) {
	m := new(ConsoleData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *managementServiceClient) GetVersion(ctx context.Context, in *GetVersionRequest, opts ...grpc.CallOption) (*GetVersionResponse, error) {
	out := new(GetVersionResponse)
	err := c.cc.Invoke(ctx, "/proto.ManagementService/GetVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagementServiceServer is the server API for ManagementService service.
// All implementations must embed UnimplementedManagementServiceServer
// for forward compatibility
type ManagementServiceServer interface {
	PressButton(context.Context, *ButtonPressRequest) (*ButtonPressResponse, error)
	GetFans(context.Context, *GetFansRequest) (*GetFansResponse, error)
	StreamConsole(ManagementService_StreamConsoleServer) error
	GetVersion(context.Context, *GetVersionRequest) (*GetVersionResponse, error)
	mustEmbedUnimplementedManagementServiceServer()
}

// UnimplementedManagementServiceServer must be embedded to have forward compatible implementations.
type UnimplementedManagementServiceServer struct {
}

func (UnimplementedManagementServiceServer) PressButton(context.Context, *ButtonPressRequest) (*ButtonPressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PressButton not implemented")
}
func (UnimplementedManagementServiceServer) GetFans(context.Context, *GetFansRequest) (*GetFansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFans not implemented")
}
func (UnimplementedManagementServiceServer) StreamConsole(ManagementService_StreamConsoleServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamConsole not implemented")
}
func (UnimplementedManagementServiceServer) GetVersion(context.Context, *GetVersionRequest) (*GetVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}
func (UnimplementedManagementServiceServer) mustEmbedUnimplementedManagementServiceServer() {}

// UnsafeManagementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagementServiceServer will
// result in compilation errors.
type UnsafeManagementServiceServer interface {
	mustEmbedUnimplementedManagementServiceServer()
}

func RegisterManagementServiceServer(s grpc.ServiceRegistrar, srv ManagementServiceServer) {
	s.RegisterService(&ManagementService_ServiceDesc, srv)
}

func _ManagementService_PressButton_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ButtonPressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).PressButton(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ManagementService/PressButton",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).PressButton(ctx, req.(*ButtonPressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetFans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetFans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ManagementService/GetFans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetFans(ctx, req.(*GetFansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_StreamConsole_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ManagementServiceServer).StreamConsole(&managementServiceStreamConsoleServer{stream})
}

type ManagementService_StreamConsoleServer interface {
	Send(*ConsoleData) error
	Recv() (*ConsoleData, error)
	grpc.ServerStream
}

type managementServiceStreamConsoleServer struct {
	grpc.ServerStream
}

func (x *managementServiceStreamConsoleServer) Send(m *ConsoleData) error {
	return x.ServerStream.SendMsg(m)
}

func (x *managementServiceStreamConsoleServer) Recv() (*ConsoleData, error) {
	m := new(ConsoleData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ManagementService_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ManagementService/GetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetVersion(ctx, req.(*GetVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ManagementService_ServiceDesc is the grpc.ServiceDesc for ManagementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ManagementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ManagementService",
	HandlerType: (*ManagementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PressButton",
			Handler:    _ManagementService_PressButton_Handler,
		},
		{
			MethodName: "GetFans",
			Handler:    _ManagementService_GetFans_Handler,
		},
		{
			MethodName: "GetVersion",
			Handler:    _ManagementService_GetVersion_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamConsole",
			Handler:       _ManagementService_StreamConsole_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "bmc.proto",
}
